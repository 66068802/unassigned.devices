Menu="Main:4"
Title="Unassigned Devices"
Tag="unlink"
Markdown="false"
---
<?php
/* Copyright 2015, Guilherme Jardim
 * Copyright 2016-2020, Dan Landon
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */

$plugin = "unassigned.devices";
require_once("plugins/{$plugin}/include/lib.php");
$version = parse_ini_file("/etc/unraid-version");

if (file_exists("plugins/dynamix/OpenDevices.page")) @rename("plugins/dynamix/OpenDevices.page","plugins/dynamix/OpenDevices.page-");
?>

<script type="text/javascript" src="<?autov('/webGui/javascript/jquery.switchbutton.js')?>"></script>
<link type="text/css" rel="stylesheet" href="<?autov('/webGui/styles/jquery.ui.css')?>">
<link type="text/css" rel="stylesheet" href="<?autov('/webGui/styles/jquery.switchbutton.css')?>">

<link type="text/css" rel="stylesheet" href="<?autov('/webGui/styles/jquery.filetree.css')?>">
<script src="<?autov('/webGui/javascript/jquery.filetree.js')?>"></script>

<script type="text/javascript" src="<?autov('/plugins/'.$plugin.'/assets/arrive.min.js')?>"></script>
<link rel="stylesheet" type="text/css" href="<?autov('/plugins/'.$plugin.'/assets/style-'.$display['theme'].'.css')?>">

<style>
	table.usb_disks {padding: 0px 10px 0px 0px;border-collapse:collapse;white-space:nowrap;}
	table.usb_disks thead tr>td{text-align:left;width:6%;padding-right:12px}
	table.usb_disks tr>td{text-align:left;width:6%;padding-right:0;white-space:nowrap;}
	table.usb_disks tr>td+td+td{min-width:0px;}
	table.usb_disks tr>td+td+td+td{text-align:center;padding-left:0;padding-right:12px;width:auto;min-width:0px;}
	table.usb_disks tr>td+td+td+td+td+td{text-align:right;padding-left:0;padding-right:12px;width:auto;}
	table.usb_disks tr>td+td+td+td+td+td+td+td+td+td{text-align:left;}
	table.usb_disks tr>td+td+td+td+td+td+td+td+td+td+td+td{text-align:right;padding-left:0;padding-right:12px;}

	table.usb_absent thead tr>td{text-align:left;width:8%;padding-right:12px}
	table.usb_absent tr>td{text-align:left;width:8%;padding-right:0;white-space:nowrap;}
	table.usb_absent tr>td+td{text-align:left;width:auto;}
	table.usb_absent tr>td+td+td+td{text-align:right;padding-left:0;padding-right:12px;width: 5em;}

	table.samba_mounts thead tr>td{text-align:left;width:8%;padding-right:12px}
	table.samba_mounts tr>td{text-align:left;width:8%;padding-right:0;white-space:nowrap;}
	table.samba_mounts tr>td+td{text-align:left;width:auto;}
	table.samba_mounts tr>td+td+td+td+td+td+td+td+td+td{text-align:right;padding-left:0;padding-right:12px;}

	button[type=button].mount {margin:0px 14px 0 14px;}
	i.fa{margin:0px 5px 0 5px;}
	i.hdd{margin:0px; 0px;font-size: 1.1em}
	i.partition{margin-left: 18px;}
	.exec{cursor: pointer;}
	i.fa-append{margin:0px;font-size: 0.8em;position: relative; left:-0.3em;top:0.7em;}
	.underline{text-decoration: underline;}
	button.array {padding:2px 7px 2px 7px;}

	form.inline{display:inline;margin:0;padding:0;}

	.switch-wrapper {
		display: inline-block;
		position: relative;
		top: 0px;
		vertical-align: middle;
		right: -12px;
	}

	.switch-button-background.checked {
		background:#0088CC;
		border:1px solid #0088CC;
	}

	.fileTree {
		width: 305px;
		max-height: 150px;
		overflow: scroll;
		position: absolute;
		z-index: 100;
		display: none;
		color:initial;
	}
</style>

<script type="text/javascript">

	<?=$Preclear ? $Preclear->Script() : "";?>

	function rm_preclear(dev) {
		$.post(URL,{action:"rm_preclear",device:dev}).always(function(){usb_disks(tab_usbdisks)});
	}


	(function ($) {
		$.fn.getHiddenDimensions = function (includeMargin) {
			var $item = this,
			props = { position: 'absolute', visibility: 'hidden', display: 'block' },
			dim = { width: 0, height: 0, innerWidth: 0, innerHeight: 0, outerWidth: 0, outerHeight: 0 },
			$hiddenParents = $item.parents().andSelf().not(':visible'),
			includeMargin = (includeMargin == null) ? false : includeMargin;

			var oldProps = [];
			$hiddenParents.each(function ()
			{
				var old = {};

				for (var name in props)
				{
					old[name] = this.style[name];
					this.style[name] = props[name];
				}

				oldProps.push(old);
			});

			dim.width = $item.width();
			dim.outerWidth = $item.outerWidth(includeMargin);
			dim.innerWidth = $item.innerWidth();
			dim.height = $item.height();
			dim.innerHeight = $item.innerHeight();
			dim.outerHeight = $item.outerHeight(includeMargin);

			$hiddenParents.each(function (i)
			{
				var old = oldProps[i];
				for (var name in props)
				{
					this.style[name] = old[name];
				}
			});

			return dim;
		}
	}(jQuery));

	function openWindow_fsck(cmd,title,height,width) {
		var run = cmd;
		var top = (screen.height-height)/2;
		var left = (screen.width-width)/2;
		var options = 'resizeable=yes,scrollbars=yes,height='+height+',width='+width+',top='+top+',left='+left;
		window.open(run, 'log', options);
	}

	function disk_op(el, op, device){
		// add spinning and disable button
		$("button[device='"+device+"']").html("<i class='fa fa-circle-o-notch fa-spin'></i> "+(op == "mount" ? "Mounting" : "Unmounting")+" ...");
		$("button[device='"+device+"']").prop("disabled","true");
		// disable partition buttons
		td = $("button[device='"+device+"']").closest('td');
		tr = td.closest('tr');
		part = tr.is('.toggle-parts');
		disk = tr.find('span[hdd]').attr("hdd");
		if (disk) {
			tr.siblings('tr.toggle-'+disk).find('.mount').html(td.html());
		} else if (part) {
			tr.prev('tr.toggle-disk').find('.mount').html(td.html());
		}
		$.post(URL,{'action':op,'device':device},function(data)
		{
			opt = (op == "mount") ? "Mounting" : "Unmounting";
			if (data.status)
			{
				text	= "<i class='fa fa-ok green-text'></i> " + opt + "...";
			}
			else
			{
				text	= "<i class='fa fa-remove red-text'></i> " + opt + "...";
				setTimeout(usb_disks,1500);
			}
			$("button[device='"+device+"']").prop('disabled',true);
			$("button[device='"+device+"']").html( text );
		}, "json");
	}

	function pin_tab(n) {
		$.removeCookie('one',{path:'/'});
		$.cookie('tab','tab'+n,{path:'/'});
	}

	function usb_disks(tabnum)
	{
		// save table widths
		if (! diskinfo)
		{
			tableWidths = $("#usb_devices_list > table > thead > tr").children("td").map(function(i,v){return $(this).getHiddenDimensions().outerWidth;});

			<?if (version_compare($version['version'],"6.6", "<")):?>
			$("#usb_devices_list").html( $("#table_loading").html() );
			<?else:?>
			if ( !$('#spin_div').length ) {
				$('#spinner').html("<tr><td colspan='8'><div id='spin_div' class='spinner'></div></td></tr>");
			}
			$("#usb_devices_list").html( $('div.spinner').html(unraid_logo) );
			<?endif;?>
			$("#usb_devices_list > table > thead > tr").children("td").each(function(i,v)
			{
				if (i in tableWidths)
				{
					$(this).css("width", tableWidths[i]);
				}
			});
		}

		$.post(URL,{action:"get_content",display:display},function(data)
		{
			maxWidth = [];
			var toggled = $("tr.toggle-parts").filter(":visible").map(function(){return $(this).attr("name");}).get();
			if (data)
			{
				$('#usb_devices_list').html(data);

			}
			$.each(toggled, function(k,v)
			{
				if(v.length)
				{
					$("tr[name='"+v+"']").prev().find("i.fa-plus-sign").removeClass("fa-plus-sign").addClass("fa-minus-sign");
					$("tr[name='"+v+"']").css("display", "table-row");
				}
			});
		});
	}

	function detect_usb_disk_change(tabnum) {
		if ($('#tab'+tabnum).is(':checked')) {
			clearTimeout(timers.usbdisks);
			if ( $("tr.toggle-parts").find("input[name='mountpoint']:visible").length )
			{
				timers.usbdisks=setTimeout('detect_usb_disk_change('+tabnum+')',1000);
				return false;
			}
			$.post(URL,{action:"detect"},function(data)
			{
				do_reload = false;
				if (diskinfo && diskinfo !== data.diskinfo )
				{
					do_reload = true;
				}
				if(data.reload)
				{
					do_reload = true;
					$.post(URL,{action:"remove_hook"});
				}
				diskinfo = data.diskinfo;
				if (do_reload)
				{
					setTimeout(usb_disks, 500, tabnum);
				}
			},"json").always(function()
			{
				timers.usbdisks=setTimeout('detect_usb_disk_change('+tabnum+')',1000);
			});
		} else {
			clearTimeout(timers.usbdisks);
		}
		return false;
	}

	function remove_disk_config(serial){
		var title = 'Remove config';
		$( "#dialog-confirm" ).html(serial);
		$( "#dialog-confirm" ).append( "<br><br><span style='color: #E80000;'>Are you sure?</span>" );
		$( "#dialog-confirm" ).dialog({
			title: title,
			resizable: false,
			width: 500,
			modal: true,
			show : {effect: 'fade' , duration: 250},
			hide : {effect: 'fade' , duration: 250},
			buttons: {
				"Yes": function() {
					$( this ).dialog( "close" );
					$.post(URL,{action:"remove_config",serial:serial},"json");
					usb_disks(tab_usbdisks);
				},
				Cancel: function() {
					$( this ).dialog( "close" );
					$( this ).html("");
				}
			}
		});
	}

	function remove_samba_config(device){
		var title = 'Remove SMB/NFS mount';
		$( "#dialog-confirm" ).html("<dl>Source:&nbsp;&nbsp;"+device+"</dl>");
		$( "#dialog-confirm" ).append( "<dl><dt><span style='color: #E80000;'>Are you sure?</span></dd></dl>" );
		$( "#dialog-confirm" ).dialog({
			title: title,
			resizable: false,
			width: 500,
			modal: true,
			show : {effect: 'fade' , duration: 250},
			hide : {effect: 'fade' , duration: 250},
			buttons: {
				"Yes": function() {
					$( this ).dialog( "close" );
					$.post(URL,{action:"remove_samba_config",device:device},"json");
					usb_disks(tab_usbdisks);
				},
				Cancel: function() {
					$( this ).dialog( "close" );
					$( this ).html("");
				}
			}
		});
	}

	function remove_iso_config(device){
		var title = 'Remove ISO File mount';
		$( "#dialog-confirm" ).html("<dl>Source:&nbsp;&nbsp;"+device+"</dl>");
		$( "#dialog-confirm" ).append( "<dl><dt><span style='color: #E80000;'>Are you sure?</span></dd></dl>" );
		$( "#dialog-confirm" ).dialog({
			title: title,
			resizable: false,
			width: 500,
			modal: true,
			show : {effect: 'fade' , duration: 250},
			hide : {effect: 'fade' , duration: 250},
			buttons: {
				"Yes": function() {
					$( this ).dialog( "close" );
					$.post(URL,{action:"remove_iso_config",device:device},"json");
					usb_disks(tab_usbdisks);
				},
				Cancel: function() {
					$( this ).dialog( "close" );
					$( this ).html("");
				}
			}
		});
	}

	function showInput(){
		$(this).off('click');
		$(this).siblings('input').each(function(){$(this).show();});
		$(this).siblings('input').focus();
		$(this).hide();
	}

	function hideInput(){
		$(this).hide();
		$(this).siblings('span').show();
		$(this).siblings('span').click(showInput);
	}

	function add_samba_share(){
		var title = 'Add Remote SMB/NFS Share';
		$( "#dialog-samba" ).html($("#add-remote-defaults").html());
		$( "#dialog-samba" ).find(".switch").switchButton({labels_placement:"right",on_label:'YES',off_label:'NO'});
		$( "#dialog-samba" ).find(".switch-button-background").css("margin-top", "6px");
		$( "#dialog-samba" ).dialog({
		title: title,
		resizable: false,
		width: 600,
		modal: true,
		show : {effect: 'fade' , duration: 250},
		hide : {effect: 'fade' , duration: 250},
		buttons: {
			"Add": function() {
				$( this ).dialog( "close" );
				var opts = new Object();
				opts["action"]		= "add_samba_share";
				opts["PROTOCOL"]	= getVal(this,"PROTOCOL");
				opts["IP"]			= getVal(this,"IP");
				opts["USER"]		= getVal(this,"USER");
				opts["DOMAIN"]		= getVal(this,"DOMAIN");
				opts["PASS"]		= getVal(this,"PASS");
				opts["SHARE"]		= getVal(this,"SHARE");
				if (opts.SHARE && opts.IP) {
					$.post(URL,opts).done(function(){usb_disks(tab_usbdisks);});
				}
			},
			Cancel: function() {
				$( this ).dialog( "close" );
			}
		}
		});
	}

	function add_iso_share(){
		var title = 'Add ISO File Share';
		$( "#dialog-iso" ).html($("#add-iso-defaults").html());
		$( "#dialog-iso" ).find(".switch").switchButton({labels_placement:"right",on_label:'YES',off_label:'NO'});
		$( "#dialog-iso" ).find(".switch-button-background").css("margin-top", "6px");
		$( "#dialog-iso" ).dialog({
		title: title,
		resizable: false,
		width: 600,
		height: 470,
		modal: true,
		show : {effect: 'fade' , duration: 250},
		hide : {effect: 'fade' , duration: 250},
		buttons: {
			"Add": function() {
				$( this ).dialog( "close" );
				var opts = new Object();
				opts["action"]	 = "add_iso_share";
				opts["ISO_FILE"]	= getVal(this,"ISO_FILE");
				if (opts.ISO_FILE) {
					$.post(URL,opts).done(function(){usb_disks(tab_usbdisks);});
				}
			},
			Cancel: function() {
				$( this ).dialog( "close" );
			}
		}
		});
	}

	function load_hosts(el, action) {
		var target = $(el).parents("div").find("*[name='IP']");
		var old = $(el).html();
		$(el).html("<i class='fa fa-circle-o-notch fa-spin'></i> Searching ...");
		$.post(URL,{'action': action, 'var': vars, 'network': network, 'workgroup': workgroup}).done(function(data){
			$(el).html(old);
			if (data) {
				var hosts = data.split('\n');
				if (hosts.length)
				{
					var add = "<select name='IP'>";
					for(var i = 0;i < hosts.length;i++)
					{
						if (hosts[i].length)
						{
							add += "<option value='"+hosts[i].trim()+"'>"+hosts[i].trim()+"</option>";
						}
					}
					target.replaceWith(add+"</select>")
				}
				else
				{
					target.replaceWith("<input type='text' name='IP'>");
				}
			}
		});
	}

	function load_shares(el, action) {
		var old = $(el).html();
		var target = $(el).parents("div").find("*[name='SHARE']");
		$(el).html("<i class='fa fa-circle-o-notch fa-spin'></i> Loading ...");
		var opts = new Object();
		opts["action"] = action;
		opts["IP"] = getVal("#dialog-samba","IP");
		opts["USER"] = getVal("#dialog-samba","USER");
		opts["PASS"] = getVal("#dialog-samba","PASS");
		$.post(URL,opts).done(function(data){
			$(el).html(old);
			if (data != " ") {
				var shares = data.split('\n');
				if (shares.length) {
					var add = "<select name='SHARE'>";
					for(var i = 0;i < shares.length;i++){
						if (shares[i].length) {
							add += "<option value='"+shares[i]+"'>"+shares[i]+"</option>";
						}
					}
					target.replaceWith(add+"</select>");
				}
				else
				{
					target.replaceWith("<input type='text' name='SHARE'>");
				}
			}
			else
			{
				target.replaceWith("<input type='text' name='SHARE'>");
			}
		});
	}

	function getVal(el, name) {
		el = $(el).find("*[name="+name+"]");
		return value = ( $(el).attr('type') == 'checkbox' ) ? ($(el).is(':checked') ? "on" : "off") : $(el).val();
	}

	function format_disk(bt, type, device){
		var title = 'Format and Partition '+type+': '+device;
		$( "#dialog-confirm" ).html($("#format_disk").html());
		$( "#dialog-confirm" ).dialog({
			title: title,
			resizable: false,
			width: 600,
			modal: true,
			show : {effect: 'fade' , duration: 250},
			hide : {effect: 'fade' , duration: 250},
			buttons: {
				"Format": function() {
					if (getVal(this,"CONFIRM") != "Yes") {return false;}
					var bc = $("button[device='"+device+"']").html();
					$("button[device='"+device+"']").prop('disabled',true);
					$("button[device='"+device+"']").html("<i class='fa fa-circle-o-notch fa-spin'></i> Formatting ...");
					$( this ).dialog( "close" );
					fs = getVal(this,"FS");
					$.post(URL,{action:"format_"+type,device:device,fs:fs}, function(data)
						{
							$("button[device='"+device+"']").prop('disabled',true);
							$("button[device='"+device+"']").html( data.status ? "Formated" : "Format failed..." );
						},"json");
				},
				Cancel: function() {
					$( this ).dialog( "close" );
					$( this ).html("");
				}
			}
		});
	}

	function rm_partition(bt, device, partition){
		var title = 'Remove partition '+partition+' from disk '+device;
		$( "#dialog-confirm" ).html($("#rm_partition").html());
		$( "#dialog-confirm" ).dialog({
			title: title,
			resizable: false,
			width: 600,
			modal: true,
			show : {effect: 'fade' , duration: 250},
			hide : {effect: 'fade' , duration: 250},
			buttons: {
				"Remove": function() {
					if (getVal(this,"CONFIRM") != "Yes") {return false;}
					var bc = $("button[device='"+device+"']").html();
					$("span[device='"+device+partition+"']").prop('disabled',true);
					$("span[device='"+device+partition+"']").html("<i class='fa fa-circle-o-notch fa-spin'></i> Removing ...");
					$( this ).dialog( "close" );
					fs = getVal(this,"FS");
					$.post(URL,{action:"rm_partition",device:device,partition:partition},"json").always(function(data)
						{
							usb_disks(tab_usbdisks);
						});
				},
				Cancel: function() {
					$( this ).dialog( "close" );
					$( this ).html("");
				}
			}
		});
	}

	function load_samba_opts(el) {
		p = $(el).parents("div").find(".options");
		if ($(el).val() == "SMB") {
			p.html($("#add-samba-defaults").html());
		} else if ($(el).val() == "NFS") {
			p.html($("#add-nfs-defaults").html());
		}
	}

	function get_tab_title_by_name(name) {
		var tab		= $("input[name$=tabs] + label").filter(function(){return $(this).text() === name;}).prev();
		var title	= $("div#title > span.left"		).filter(function(){return $(this).text() === name;}).parent();
		if (tab.length) {
			return tab
		} else if (title.length) {
			return title
		} else {
			return $(document)
		}
	}

	function addButtonTab(Button, Name, autoHide, Append)
	{
		if (typeof(autoHide) == "undefined") autoHide = true;
		if (typeof(Append)	 == "undefined") Append	 = true;

		var Target		= get_tab_title_by_name(Name);
		var elementId 	= 'event-' + new Date().getTime() * Math.floor(Math.random()*100000);
		<?if ($display['theme'] == 'white' || $display['theme'] == 'black'):?>
			var element	= $("<span id='"+elementId+"' class='status'>"+Button+"</span>");
		<?else:?>
			var element	= $("<span id='"+elementId+"' class='status'><span style='margin:5px;'></span>"+Button+"</span>");
		<?endif;?>

		if (element.find("input[type='button']").length)
		{
			element.addClass("vhshift");
			element.find("input[type='button']").prop("style","padding-top: 5px; padding-bottom: 5px; margin-top:-3px; margin-bottom:0;");
		}

		if (Target.prop('nodeName') === "DIV")
		{
			element.addClass("vhshift");
			if (Append)
			{
				Target.append(element);
			}
			else
			{
				Target.prepend(element);
			}
		}
		else if (Target.prop('nodeName') === "INPUT")
		{
			element.css("display","none");

			if (Append)
			{
				$('.tabs').append(element);
			}
			else
			{
				$('.tabs').prepend(element);
			}

			Target.bind({click:function()
			{
				$('#'+elementId).fadeIn('slow');}
			});

			if (Target.is(':checked') || ! autoHide) {
				$('#'+elementId).fadeIn('slow');
			}

			$("input[name$=tabs]").each(function()
			{
				if (! $(this).is(Target) && autoHide )
				{
					$(this).bind({click:function()
					{
						$('#'+elementId).fadeOut('slow');}
					});
				}
			});
		}
		else
		{
			return false;
		}
	}
</script>

<div style='display: inline; float: right; margin: -58px -14px;' id='unassigned_tabbed'></div>
<div id="dialog-confirm" style="display:none;" title=""></div>
<div id="dialog-samba" style="display:none;" title=""></div>
<div id="dialog-iso" style="display:none;" title=""></div>
<?=$Preclear ? $Preclear->html() : "";?>
<div id="add-remote-defaults" style="display:none;">
	<dl>
		<dt>Protocol:</dt>
		<dd>
			<select name="PROTOCOL" onchange="load_samba_opts(this);">
			<option>Choose</option>
			<option value="SMB">SMB</option>
			<option value="NFS">NFS</option>
			</select>
		</dd>
	</dl>
	<p>Note: Dockers will not be able to access any SMB or NFS share until you restart the Docker service after the device is mounted.	Be sure to add a Docker path mapping the SMB or NFS share as 'RW/Slave' or 'RO/Slave'.</p>
	<p>Go to Settings->Docker and disable then re-enable Docker.</p>
	<div class="options"></div>
</div>

<div id="add-nfs-defaults" style="display:none;">
	<dl>
		<dt>IP/Host:</dt>
		<dd><span class="samba_hosts"></dd>
		<dd><input type="text" name="IP"></span></dd>
		<dt>&nbsp;</dt>
		<dd><button type="button" onclick="load_hosts(this, 'list_nfs_hosts');">Search for servers</button></dd>
		<dd><input type="hidden" name="USER"></dd>
		<dd><input type="hidden" name="PASS"></dd>
		<dt>Share:</dt>
		<dd><span class="samba_shares"><input type='text' name='SHARE'></span></dd>
		<dt>&nbsp;</dt>
		<dd><button type="button" onclick="load_shares(this, 'list_nfs_shares');">Load Shares</button></dd>
	</dl>
</div>

<div id="add-samba-defaults" style="display:none;">
	<dl>
		<dt>IP/Host:</dt>
		<dd><input type="text" name="IP"></dd>
		<dt>&nbsp;</dt>
		<dd><button type="button" onclick="load_hosts(this, 'list_samba_hosts');">Search for servers</button></dd>
		<dt>Username:</dt>
		<dd><input type="text" name="USER"></dd>
		<dt>Password:</dt>
		<dd><input type="password" name="PASS"></dd>
		<dt>Domain:</dt>
		<dd><input type="text" name="DOMAIN"></dd>
		<dt>Share:</dt>
		<dd><input type='text' name='SHARE'></dd>
		<dt>&nbsp;</dt>
		<dd><button type="button" onclick="load_shares(this, 'list_samba_shares');">Load Shares</button></dd>
	</dl>
</div>

<div id="add-iso-defaults" style="display:none;">
<script>
	$("input[data-pickroot]").fileTreeAttach();
</script>
	<p>Note: Dockers will not be able to access any ISO file share until you restart the Docker service after the device is mounted.	Be sure to add a Docker path mapping the ISO share as 'RW/Slave' or 'RO/Slave'.</p>
	<p>Go to Settings->Docker and disable then re-enable Docker.</p>
	<dl>
		<dt>ISO File:</dt>
		<dd><input id='iso_file' type='text' name='ISO_FILE' placeholder="Click to select ISO file" data-pickcloseonfile="true" data-pickfilter="iso" data-pickroot="/mnt/user/" data-pickfolders="true" required="required" /></dd>
	</dl>
</div>

<div id="format_disk" style="display:none;">
	<dl>
		<dt>Filesystem:</dt>
		<dd>
			<select name="FS">
				<option value="xfs">XFS</option>
				<option value="btrfs">BTRFS</option>
				<option value="ntfs">NTFS</option>
				<option value="exfat">exFAT</option>
				<option value="fat32">FAT32</option>
			</select>
		</dd>
		<dt>Type<span class="red">'Yes'</span>to confirm:</dt>
		<dd><input type="text" name="CONFIRM" style="width: 60px"></dd>
	</dl>
	<p>Note: An XFS or BTRFS disk partitioned in UD is compatible with the array disk partitioning and can be added to the array.</p>
</div>

<div id="rm_partition" style="display:none;">
	<dl>
		<dt>Type<span class="red">'Yes'</span>to confirm:</dt>
		<dd><input type="text" name="CONFIRM" style="width: 60px"></dd>
	</dl>
	<p>Note: The data on this disk will be lost!</p>
</div>

<div id="table_loading" style="display: none;">
	<table class='disk_status wide usb_disks'>
		<thead>
			<tr>
				<td>Device</td>
				<td>Identification</td>
				<td></td>
				<td>Temp</td>
				<td>FS</td>
				<td>Size</td>
				<td>Open files</td>
				<td>Used</td>
				<td>Free</td>
				<td>Pass Through</td>
				<td>Read Only</td>
				<td>Auto Mount</td>
				<td>Share</td>
				<td>Log</td>
				<td>Script</td>
			</tr>
		</thead>
		<tbody id="spinner">
		<tr>
			<td colspan="13" style="text-align:center;padding-top:12px">
				<i class="fa fa-spinner fa-spin icon"></i><em>Please wait, retrieving information ...</em>
			</td>
		</tr>
		</tbody>
	</table>
</div>

<div id="usb_devices_list">
</div>

<blockquote class='inline_help'>
	<p>Unassigned Devices is called UD for short.</p>
	<p>Hover your mouse over an any active area on the UD page and a tool tip will show you what clicking that area does.</p>
	<p>You can mount USB devices, sata drives, Remote SMB/NFS shares, and ISO Files with UD.  Any devices with the auto mount switch on will be mounted when the array is started.  All drives and SMB/NFS Mounts are unmounted when the array is stopped on the 'unmounting_disks' event.</p>
	<p>If you want to share your drive, you can turn on the Share switch.  The default for Remote SMB shares is Public read/write access.  Enable SMB Security by user in the Unassigned Devices Settings.  NFS shares are exported and access is read/write.  The export of NFS devices is enabled in the Unassigned Devices settings. You can also enable a common script that will be executed on every disk mount.  In order to share any UD device, sharing needs to be enabled in the UD Settings and the switch turned on to share the particular device.</p>
	<p>After entering a mount point, press Enter to save the change.</p>
	<p>Additional options are available when you click on the device identification.  When the disk is unmounted, the mount name of the device can be changed.  A disk can be formatted and an fsck run to check the disk.</p>
	<p><b>The 'Settings->Unassigned Devices' security settings for SMB and NFS must be set correctly for SMB and NFS sharing to work properly.</b></p>
	<p><b>If the mount button is grayed out for a SMB/NFS remote share, the remote server is not responding to a ping.  The remote share server must respond to a ping or UD will consider it off-line.</b></p>
	<p>UD has a destructive mode that allows deleting disk partitions and formatting disks.	If Destructive Mode is not turned on in the UD Settings, you WILL NOT be able to format a disk or remove partitions.  Go the the 'Settings->Unassigned Devices' to set the destructive mode.</p>
	<p>To format a disk:</p>
		<li>Destructive mode must be enabled.</li>
		<li>Disk must have all partitions removed.	Unmount disk, click on the serial number, and click on all red-X to delete partitions.</li>
		<li>If the disk has been precelared and shows a grayed 'Format' button, click on the disk serial number, then click on the red-X to delete the preclear status file.</li>
	<p><b>Note: A disk partitioned in UD is compatible with the array disk partitioning and can be added to the array.</b>
	<p><b>Note: You can mount a disk from the array that has been encrypted with the following caveats:
		<li>The array disk passphrase has to be defined.  You cannot enter the passphrase for the disk in UD.</li>
		<li>The disk can only be mounted if the current array passphrase is the same as the encrypted disk.</li>
		<li>An array encrypted disk cannot be created with UD.</li></b>
	<p>UD includes scripts that are used for mounting and unmounting devices and SMB/NFS mounts.	These scripts can be used from the command line or in scripts as necessary.
	<p>Unassigned devices script:
		<li>'/usr/local/sbin/rc.unassigned mount auto' - all devices and SMB/NFS mounts set to auto mount will be mounted.</li>
		<li>'/usr/local/sbin/rc.unassigned umount auto' - all devices and SMB/NFS mounts set to auto mount will be unmounted.</li>
		<li>'/usr/local/sbin/rc.unassigned umount all' - all devices and SMB/NFS mounts are unmounted in preparation for shutting down the array.</li>
		<li>'/usr/local/sbin/rc.unassigned mount /dev/sdX' - mount device sdX where 'X' is the device designator.</li>
		<li>'/usr/local/sbin/rc.unassigned umount /dev/sdX' - unmount device sdX where 'X' is the device designator.	You can use this command in a UD script to unmount the device when the script has completed.</li>
		<li>'/usr/local/sbin/rc.unassigned refresh /dev/sdX' - used at the end of the 'ADD' case of a script so the 'Running...' indicator will be updated.</li>
	</p>
	<p>Switch the 'Complete' button to change the web page to just show hardware devices.	Switch the 'Simple' switch to switch back to the full web display.</p>
	<p>Click on <u>Settings</u> to go to the UD Settings.</p>
</blockquote>
</form>

<script type="text/javascript">
	var maxWidth	= [];
	var tableWidths = [];
	var display		= <?=json_encode($display);?>;
	var vars		= <?=json_encode($var);?>;
	var network		= [];
	var workgroup	= "";
	<?
	if (isset($var['WORKGROUP'])) echo "var workgroup = '{$var['WORKGROUP']}';\n";
	for ($i=0; $i < 11; $i++)
	{ 
		$_var = "eth{$i}";
		if (isset($$_var) )
		{
			$iface = $$_var;
			$gateway = array_values(array_flip(preg_grep("/GATEWAY:/", array_flip($iface))));
			$ipaddr	= array_values(array_flip(preg_grep("/IPADDR:/",	array_flip($iface))));
			$netmask = array_values(array_flip(preg_grep("/NETMASK/",	array_flip($iface))));
			for ($z=0; $z < count($ipaddr); $z++)
			{ 
				echo "network.push({gateway:'{$ipaddr[$z]}', ip:'{$ipaddr[$z]}', netmask:'{$netmask[$z]}'});\n";
			}
		}
	}
	?>
	var tab_usbdisks	= $('input[name$="tabs"]').length;
	var URL				= '/plugins/<?=$plugin;?>/UnassignedDevices.php';
	var diskinfo		= "";

	$('#tab'+tab_usbdisks).bind({click:function() {pin_tab(tab_usbdisks); detect_usb_disk_change(tab_usbdisks);}});

	// Remove or hide diskio toggle
	tabElement = get_tab_title_by_name("Unassigned Devices");
	if (tabElement.prop("nodeName") == "DIV")
	{
		tabElement.addClass("disable_diskio");
	 	$(function()
	 	{
	 		tabElement.find("i.toggle").remove();
	 	});
	} else if (tabElement.prop("nodeName") == "INPUT")
	{
		tabElement.bind({click:function() {$('i.toggle').hide('slow');}});
	}


	// Bind Arrive events 
	$("#usb_devices_list").arrive("tr",{onceOnly:false},function()
	{
		tr = $(this);

		maxWidth.push(tr.find("td:nth-child(2) > span").getHiddenDimensions().width );
		$(".usb_disks > thead > tr > td:nth-child(2)").css("min-width", Math.max.apply(Math, maxWidth) + 10 );

		tr.find("span.toggle-hdd").click(function(e)
		{
			$(this).disableSelection();disk = $(this).attr("hdd");el = $(this);
			$(".toggle-"+disk).slideToggle(0,function(){
				if ( $("tr.toggle-"+disk+":first").is(":visible") ){
					el.find(".fa-append").addClass("fa-minus-sign").removeClass("fa-plus-sign");
				} else {
					el.find(".fa-append").removeClass("fa-minus-sign").addClass("fa-plus-sign");
				}
			});
		});
		tr.find( "span.text" ).click(showInput);
		tr.find( "input[name='mountpoint']" ).blur(hideInput);
		tr.find( "button[role$=mount]" ).on( "click", function()
		{
			disk_op(this, $(this).attr("role"), $(this).attr("device"));
		});
		tr.find("button[role=format]").click(function(){format_disk(this, $(this).attr("context"), $(this).attr("device"));});

	});


	$("#usb_devices_list").arrive("input[type='checkbox']",{onceOnly:false},function()
	{
		checkbox = $(this);
		checkbox.each(function(){var checked = $(this).is(":checked");$(this).switchButton({show_labels: false, checked:checked});});

		if (checkbox.hasClass("automount"))
		{
			checkbox.change(function()
			{
				$.post(URL,{action:"automount",serial:$(this).attr("serial"),status:$(this).is(":checked")},function(data)
				{
					$(this).prop("checked",data.automount);
				},"json");
			});
		}

		else if (checkbox.hasClass("samba_automount"))
		{
			checkbox.change(function()
			{
				$.post(URL,{action:"samba_automount",device:$(this).attr("device"),status:$(this).is(":checked")},function(data)
				{
					$(this).prop("checked",data.automount);
				},"json");
			});
		}

		else if (checkbox.hasClass("iso_automount"))
		{
			checkbox.change(function()
			{
				$.post(URL,{action:"iso_automount",device:$(this).attr("device"),status:$(this).is(":checked")},function(data)
				{
					$(this).prop("checked",data.automount);
				},"json");
			});
		}

		else if (checkbox.hasClass("toggle_share"))
		{
			checkbox.change(function()
			{
				$.post(URL,{action:"toggle_share",info:$(this).attr("info"),status:$(this).is(":checked")},function(data)
				{
					$(this).prop("checked",data.result);
				},"json");
			});
		}

		else if (checkbox.hasClass("read_only"))
		{
			checkbox.change(function()
			{
				$.post(URL,{action:"read_only",serial:$(this).attr("serial"),status:$(this).is(":checked")},function(data)
				{
					$(this).prop("checked",data.read_only);
				},"json");
			});
		}

		else if (checkbox.hasClass("pass_through"))
		{
			checkbox.change(function()
			{
				$.post(URL,{action:"pass_through",serial:$(this).attr("serial"),status:$(this).is(":checked")},function(data)
				{
					$(this).prop("checked",data.pass_through);
				},"json");
			});
		}
	});

	$( "#usb_devices_list" ).arrive(".show-complete", {onceOnly:false}, function()
	{
		$(this).css("display", $(".complete-switch").is(":checked") ? "block" : "none");
	});

	$(function()
	{
		// Add icons to Tab/Title bar
		addButtonTab('<a title="Unassigned Devices Settings" href="/Settings/UnassignedDevicesSettings"><i class="fa fa-gear"></i></a>',
								 "Unassigned Devices");
		addButtonTab('<a style="cursor:pointer" onclick="$.post(\''+URL+'\',{\'action\':\'rescan_disks\'});" title="Rescan Disks"><i class="fa fa-refresh"></i></a>',
								 "Unassigned Devices");
		addButtonTab('<div class="switch-wrapper"><a style="cursor:pointer" title="Switch Display Mode"><input type="checkbox" class="complete-switch"></a></div>',
								 "Unassigned Devices");

		// Add switchButton to Tab/Title bar
		$('.complete-switch').switchButton({ labels_placement: "left", on_label: 'Complete', off_label: 'Simple', checked: $.cookie('unassigned-complete-view') != 'false'});
		$('.complete-switch').change(function()
		{
			$('.show-complete').slideToggle('slow');
			$.cookie('unassigned-complete-view', $('.complete-switch').is(':checked') ? 'true' : 'false', { expires: 3650, path:'/' });
		});

		// Load contents if tab is checked
		if ($('#tab'+tab_usbdisks).is(':checked')) {
			$('#tab'+tab_usbdisks).trigger("click");
			$.removeCookie('one',{path:'/'});
		}

		// Load page content
		usb_disks(tab_usbdisks);
		detect_usb_disk_change(tab_usbdisks);
	});
</script>
