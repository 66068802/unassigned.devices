Menu="Utilities"
Title="Unassigned Devices"
Icon="unlock-alt"
---
<?php
/* Copyright 2015, Guilherme Jardim
 * Copyright 2016-2020, Dan Landon
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */

$plugin = "unassigned.devices";
require_once("plugins/{$plugin}/include/lib.php");
require_once("plugins/{$plugin}/include/tr.php");
$config_file = "/tmp/{$plugin}/config/{$plugin}.cfg";
$cfg = is_file($config_file) ? @parse_ini_file($config_file, true) : array();

$uuid_devices = array();
$encrypt_devices = array();
foreach (get_all_disks_info() as $d) {
	if (($d['partitions'][0]['fstype'] == "xfs") && (! is_mounted($d['device']."1"))) {
		$a = array();
		$a['device'] = $d['device'];
		$a['label'] = $d['serial'];
		$uuid_devices[] = $a;
	}
	if ($d['partitions'][0]['fstype'] == "crypto_LUKS") {
		$a = array();
		$a['label'] = $d['serial'];
		$encrypt_devices[] = $a;
	}
}

if (count($_POST)) {
	if ($_POST['#apply'] == "Apply") {
		array_map(function($k, $v) use (&$cfg) { if($k[0] != "#") $cfg["Config"][$k] = $v; }, array_keys($_POST), $_POST );
		remove_shares();
		save_ini_file($config_file, $cfg);
		reload_shares();
	} else if (($_POST['#command'] == "UUID") && (isset($_POST['change_uuid']))) {
		$dev = substr($_POST['change_uuid'], 1, 8)."1";
		change_UUID($dev);
	} else if ($_POST['#command'] == "chg_pass") {
		$serial = $_POST['set_pass'];
		$password = $_POST['password'];
		set_config($serial, "pass", encrypt_data($password));
	}
}

$use_netbios = ($var['USE_NETBIOS']=='yes') ? TRUE : FALSE;
$parted = file_exists("/usr/sbin/parted");

if ((! $use_netbios && $cfg['Config']['samba_v1'] == "yes") || (! file_exists("/usr/sbin/parted") && $cfg['Config']['destructive_mode'] == "enabled")) {
	if (! $use_netbios) {
		$cfg['Config']['samba_v1'] = "no";
	}
	if (! $parted) {
		$cfg['Config']['destructive_mode'] = "disabled";
	}
	save_ini_file($config_file, $cfg);
}
?>
<script type="text/javascript" src="<?autov('/webGui/javascript/jquery.filetree.js')?>"></script>
<link type="text/css" rel="stylesheet" href="<?autov('/webGui/styles/jquery.filetree.css')?>" >

<style type="text/css">
	.fileTree {
		border: solid 1px #BBB;
		background: #FFF;
		overflow: scroll;
		padding: 5px;
		position:absolute;
		z-index:100;
		display:none;
		color:initial;
	}
</style>

<script type="text/javascript">
	function openFileBrowser(el, root, filter, on_folders, on_files, close_on_select) {
		if (on_folders === undefined) on_folders = true;
		if (on_files   === undefined) on_files = true;
		if (! filter && ! on_files)   filter = 'HIDE_FILES_FILTER';
		if (! root.trim() ) root = '/mnt/user/';
		var p = $(el);
		// Skip if fileTree is already open
		if ( p.next().hasClass('fileTree') ){return null;}
		// create a random id
		var r = Math.floor((Math.random()*1000)+1);
		// Add a new span and load fileTree
		p.after("<span id='fileTree"+r+"' class='textarea fileTree'></span>");
		var ft = $('#fileTree'+r);
		ft.fileTree({
			root: root,
			filter: filter,
			allowBrowsing : true
			},
			function(file){if(on_files){p.val(file);if(close_on_select){ft.slideUp('fast',function (){ft.remove();});}};p.trigger('change');},
			function(folder){if(on_folders){p.val(folder);if(close_on_select){$(ft).slideUp('fast',function (){$(ft).remove();});}};p.trigger('change');}
		);
		// Format fileTree according to parent position, height and width
		ft.css({'left':p.position().left,'top':( p.position().top + p.outerHeight() ),'width':(p.width()) });
		// close if click elsewhere
		$(document).mouseup(function(e){if(!ft.is(e.target) && ft.has(e.target).length === 0){ft.slideUp('fast',function (){$(ft).remove();});}});
		// close if parent changed
		p.bind('keydown',function(){ft.slideUp('fast',function (){$(ft).remove();});});
		// Open fileTree
		ft.slideDown('fast');
	} 

	function prepareSecurity(el) {
		$("#smb_security").css("display", ( $(el).val() == "no" ? "none" : "block") );
	}
</script>

<div id="title" class="nocontrol"><?tr("Common Settings")?></div>
<form markdown="1" name="common_settings" method="POST">

<?if (! $parted):?>
> **Note:** The 'Unassigned Devices Plus' plugin must be installed in order to mount HFS+ and exFAT disk formats, and enable desctrctive mode.
<?endif;?>

<?tr('Common Script')?>:
: <input type="text" name="common_cmd" onclick="openFileBrowser(this,'/boot/config/plugins/<?=$plugin?>/','sh',false,true,true);" value="<?=$cfg['Config']['common_cmd'];?>">

<?if ($translations):?>:plug1<?endif;?>
> If set, this script will run before the device script.  The action is in the environment variable '**$ACTION**'.  Be sure you reference all commands with their full path.
<?if ($translations):?>:end<?endif;?>

<?tr("Destructive Mode")?>:
: <select name="destructive_mode" size="1" <?if (! $parted):?>disabled<?endif;?>>
  <?=mk_option($cfg["Config"]["destructive_mode"], "disabled", tr("Disabled",true));?>
  <?=mk_option($cfg["Config"]["destructive_mode"], "enabled", tr("Enabled",true));?>
  </select><?if (! $parted):?>&nbsp;<?tr("'Unassigned Devices Plus' plugin must be installed to enable Destructive Mode")?>.<?endif;?>

<?if ($translations):?>:plug2<?endif;?>
> If enabled, this will allow you to erase and format partitions using Unassigned Devices. This cannot be enabled unless the 'Unassigned Devices Plus' plugin is installed.
<?if ($translations):?>:end<?endif;?>

<?tr("Auto Mount USB Devices")?>?
: <select name="automount_usb" size="1">
  <?=mk_option($cfg["Config"]["automount_usb"], "no", tr("No",true));?>
  <?=mk_option($cfg["Config"]["automount_usb"], "yes", tr("Yes",true));?>
  </select>

<?if ($translations):?>:plug3<?endif;?>
> When set to **Yes**, will auto mount a new USB device and share it without user intervention.
<?if ($translations):?>:end<?endif;?>

<?tr("Force all SMB remote shares to SMB v1")?>?
: <select name="samba_v1" size="1" <?if (! $use_netbios):?>disabled<?endif;?>>
  <?=mk_option($cfg["Config"]["samba_v1"], "no", tr("No",true));?>
  <?=mk_option($cfg["Config"]["samba_v1"], "yes", tr("Yes",true));?>
  </select><?if (! $use_netbios):?>&nbsp;<span style="font-weight: bold">NetBIOS</span> <?tr("must be enabled in SMB Settings to enable SMB v1")?>.<?endif;?>

<?if ($translations):?>:plug4<?endif;?>
> Normally a SMB remote share will be mounted with the highest version of SMB that the remote server will support.  When set to **Yes**, all SMB remote shares will be forced to mount with SMB v1.  Some remote shares will give errors when mounted with SMB v2.  SMB v1 has security issues and should not be used unless absolutely necessary.  This cannot be enabled if NetBIOS is disabled.
<?if ($translations):?>:end<?endif;?>

<?tr("Mount SSDs with 'discard' option")?>?
: <select name="discard" size="1">
  <?=mk_option($cfg["Config"]["discard"], "yes", tr("Yes",true));?>
  <?=mk_option($cfg["Config"]["discard"], "no", tr("No",true));?>
  </select>

<?if ($translations):?>:plug5<?endif;?>
> Mount SSDs that support discard with 'discard' option.  If you are using the SSD Trim Settings to do a periodic trim of SSDs you can set this to **No**.
<?if ($translations):?>:end<?endif;?>

&nbsp;
: <input type="submit" name="#apply" value='<?tr("Apply")?>'>'<input type="button" value='<?tr("Done")?>' onclick="done()">
</form>

<div id="title" class="nocontrol"><?tr("SMB Security")?></div>
<form markdown="1" name="smb_settings" method="POST">
<?tr("Enable SMB Security")?>?
: <select name="smb_security" size="1" onchange="prepareSecurity(this);">
  <?=mk_option($cfg['Config']["smb_security"], "no", tr("No",true))?>
  <?=mk_option($cfg['Config']["smb_security"], "yes", tr("Yes",true))?>
  <?=mk_option($cfg['Config']["smb_security"], "hidden", tr("Yes (hidden)",true))?>
  </select>

<div id="smb_security" style="display: <?=($cfg['Config']["smb_security"] == "no" || $cfg['Config']["smb_security"] == "" ? "none" : "block");?>">
	<?php foreach ($users as $user): ?>
	<?php if ($user['name'] == "root"): continue; endif;?>
	<dl>
		<dt><?=$user['name']?></dt>
		<dd>
			<select name="smb_<?=$user['name']?>" size="1">
			<?=mk_option($cfg["Config"]["smb_{$user[name]}"], "no-access", tr("No Access",true))?>
			<?=mk_option($cfg["Config"]["smb_{$user[name]}"], "read-write", tr("Read/Write",true))?>
			<?=mk_option($cfg["Config"]["smb_{$user[name]}"], "read-only", tr("Read-only",true))?>
			</select>
		</dd>
	</dl>
	<?php endforeach; ?>
</div>

<?if ($translations):?>:plug6<?endif;?>
> Set the user level of SMB Security.
>
> + Set to **Yes** to enable SMB Security on SMB shares.  Set access by user to allow access and whether or not the user can write to the share.
> + Set to **Yes (hidden)** to enable SMB Security on SMB shares that will not be visible.  Set access by user to allow access and whether or not the user can write to the share.
> + Set to **No** will share devices, SMB/NFS, and iso Mounts Public with read and write access.
<?if ($translations):?>:end<?endif;?>

&nbsp;
: <input type="submit" name="#apply" value='<?tr("Apply")?>'><input type="button" value='<?tr("Done")?>' onclick="done()">
</form>

<div id="title" class="nocontrol"><?tr("NFS Settings")?></div>
<form markdown="1" name="nfs_settings" method="POST">
Enable NFS export?
: <select name="nfs_export" size="1" <?if ($var['shareNFSEnabled']=="no"):?>disabled<?endif;?>>
  <?=mk_option($cfg['Config']["nfs_export"], "no", tr("No",true))?>
  <?=mk_option($cfg['Config']["nfs_export"], "yes", tr("Yes",true))?>
  </select><?if ($var['shareNFSEnabled']=="no"):?>&nbsp;<?tr("NFS must be enabled to enable NFS Export")?>.<?endif;?>

<div id="nfs_security" style="display: <?=($cfg['Config']["nfs_export"] == "no" ? "none" : "block");?>">
<dl>
	<dt><?tr("NFS Security")?>:</dt>
	<dd>
		<select name="nfs_security" size="1">
		<?=mk_option($cfg["Config"]["nfs_security"], "public", tr("Public",true))?>
		<?=mk_option($cfg["Config"]["nfs_security"], "private", tr("Private",true))?>
		</select>
	</dd>
</dl>

<div id="nfs_rule" style="display: <?=($cfg['Config']["nfs_security"] == "public" ? "none" : "block");?>">
	<dl>
		<dt><?tr("Rule")?>:</dt>
		<dd>
			<input type="text" name="nfs_rule" class="wide" maxlength="100" value="<?=$cfg['Config']["nfs_rule"];?>">
		</dd>
	</dl>
	</div>
</div>

<?if ($translations):?>:plug7<?endif;?>
> Set to **Yes** to export NFS shares.  Shares are exported Public with read and write access or Private with the rule you set.
<?if ($translations):?>:end<?endif;?>

&nbsp;
: <input type="submit" name="#apply" value='<?tr("Apply")?>'><input type="button" value='<?tr("Done")?>' onclick="done()">
</form>

<div id="title" class="nocontrol"><?tr("Set Encrypted Disk Password")?></div>
<form markdown="1" name="set_pass" method="POST">
Select Disk:
: <select name="set_pass" size="1">

  <?foreach ($encrypt_devices as $d) {?>
  <?=mk_option($disk_encrypt, ($d['label']), ($d['label']))?>
  <?}?>
  </select>

<?tr("Enter Disk Password")?>:

: <input type="password" name="password" class="wide" maxlength="100" value="">
  
<?if ($translations):?>:plug8<?endif;?>
> Select the disk that you want to set a Password.  This is the password for this disk only and does not affect the array password/passphrase.  Leave password blank to use the array password/passphrase.
<?if ($translations):?>:end<?endif;?>

&nbsp;
: <form name="change_disk_pass" method="POST" action="/update.php" target="progressFrame">
   	<input type="hidden" name="#command" value="chg_pass">
    <input type="submit" value='<?tr("Set Password")?>' title='<?tr("Set the disk Password")?>.' <?=count($encrypt_devices) ? "" : "disabled"?>>
  </form>
</form>

<div id="title" class="nocontrol"><?tr("Change Disk UUID")?></div>
<form markdown="1" name="change_uuid" method="POST">
Select Disk to change UUID:
: <select name="change_uuid" size="1">

  <?foreach ($uuid_devices as $d) {?>
  <?=mk_option($disk_uuid, ("(".$d['device'].") - ".$d['label']), ("(".$d['device'].") - ".$d['label']))?>
  <?}?>
  </select>
  
<?if ($translations):?>:plug9<?endif;?>
> Select the disk that you want to change the UUID.  This is useful when a disk has been removed from the array and has he same UUID as an array disk.  Drive must be unmounted to change the UUID.
<?if ($translations):?>:end<?endif;?>

&nbsp;
: <form name="change_disk_uuid" method="POST" action="/update.php" target="progressFrame">
   	<input type="hidden" name="#command" value="UUID">
    <input type="submit" value='<?tr("Change UUID")?>' title='<?tr("Change the disk UUID")?>.' <?=count($uuid_devices) ? "" : "disabled"?>>
  </form>
</form>
